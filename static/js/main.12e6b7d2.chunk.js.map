{"version":3,"sources":["helper.js","Menu.js","Umweltzonenlayer.js","App.js","reportWebVitals.js","index.js"],"names":["host","LOOKUP","abgebaut","color","signature","header","title","inaktiv","unauffaellig","auffaellig","warnend","unknown","MONTHS","getUWZ","setUWZ","a","md5FetchJSON","uwz","getGazData","setGazData","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","no2","gazData","getGazDataForTopicIds","hasValues","item","values","werte","undefined","JSON","stringify","getLastMeasurement","lym","getLastYearMeasurements","lymValues","year","length","value","monthIndex","getLastYear","sortedkeys","Object","keys","sort","getLastYearM1","ly","getWeightedAverage","measurments","getActivityStatus","bis","getStatus","getSignature","status","LogSelection","selectedFeature","useContext","FeatureCollectionContext","console","log","properties","getAdditionalInfo","lastYearAverage","lastYear","lastYearM1Average","lym1","getLastYearMinus1Measurements","lastYearM1","ret","getTitle","lm","demontage","Date","getMonth","getFullYear","convertItemToFeature","itemIn","addSVGToProps","i","text","strasse","hausnummer","zusatzinfo","geometry","geojson","info","additionalInfo","subtitle","foto","type","selected","crs","name","itemFilterFunction","filterState","stations","includes","MyMenu","setAppMenuActiveMenuSection","UIDispatchContext","filteredItems","filterMode","shownFeatures","FeatureCollectionDispatchContext","setFilterState","kategorien","setFilterMode","items","themen","filterConfiguration","mode","resetedFilter","filters","key","indent","icon","setAll","setNone","colorizer","ModalApplicationMenu","menuIcon","menuTitle","menuIntroduction","className","to","containerId","smooth","delay","onClick","menuSections","Section","sectionKey","sectionTitle","term","count","getFilterHeader","sectionBsStyle","sectionContent","FilterPanel","DefaultSettingsPanel","ConfigurableDocBlocks","configs","getSimpleHelpForTM","UWZ","useState","location","TopicMapContext","useEffect","document","featureCollection","style","feature","weight","opacity","fillColor","fillOpacity","labeler","zoom","textShadow","featureClickHandler","App","TopicMapContextProvider","appKey","featureItemsURL","getFeatureStyler","getGTMFeatureStyler","featureTooltipFunction","clusteringOptions","iconCreateFunction","getClusterIconCreatorFunction","props","additionalLayerConfiguration","initialActive","layer","classKeyFunction","getColorFromProperties","TopicMapComponent","locatorControl","modalMenu","gazetteerSearchPlaceholder","infoBox","GenericInfoBoxFromFeature","pixelwidth","config","city","navigator","noun","singular","plural","noCurrentFeatureTitle","noCurrentFeatureContent","ContactButton","action","link","createElement","setAttribute","br","mailToHref","encodeURI","window","href","replace","body","appendChild","click","FeatureCollection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.12e6b7d2.chunk.js","sourcesContent":["import { addSVGToProps } from \"react-cismap/tools/svgHelper\";\nimport { md5FetchText, fetchJSON, md5FetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\nimport { useContext } from \"react\";\nimport { FeatureCollectionContext } from \"react-cismap/contexts/FeatureCollectionContextProvider\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nexport const LOOKUP = {\n  abgebaut: {\n    color: \"#9DBCCC\",\n    signature: \"Luft_Icon_Messstation_abgebaut_farbig.svg\",\n    header: \"Messstation für NO₂ (inaktiv, demontiert)\",\n    title: \"abgebaut\",\n  },\n  inaktiv: {\n    color: \"#4FAFC5\",\n    signature: \"Luft_Icon_Messstation_deaktiv_farbig.svg\",\n    header: \"Messstation für NO₂ (aktiv, aktuell Messausfall)\",\n    title: \"inaktiv\",\n  },\n  unauffaellig: {\n    color: \"#9ACD32\",\n    signature: \"Luft_Icon_Messstation_unauffaellig_farbig.svg\",\n    header: \"Messstation für NO₂ (aktiv, unauffällig)\",\n    title: \"unauffällig\",\n  },\n  auffaellig: {\n    color: \"#FFA500\",\n    signature: \"Luft_Icon_Messstation_auffaellig_farbig.svg\",\n    header: \"Messstation für NO₂ (aktiv, auffällig)\",\n    title: \"auffällig\",\n  },\n  warnend: {\n    color: \"#E01414\",\n    signature: \"Luft_Icon_Messstation_warnend_farbig.svg\",\n    header: \"Messstation für NO₂ (aktiv, warnend)\",\n    title: \"warnend\",\n  },\n  unknown: { color: \"#eeeeee\", signature: \"Platz.svg\", header: \"Fehler\" },\n};\n\nconst MONTHS = [\n  \"Januar\",\n  \"Februar\",\n  \"März\",\n  \"April\",\n  \"Mai\",\n  \"Juni\",\n  \"Juli\",\n  \"August\",\n  \"September\",\n  \"Oktober\",\n  \"November\",\n  \"Dezember\",\n];\n\nexport const getUWZ = async (setUWZ) => {\n  const uwz = await md5FetchJSON(\"MapData\", host + \"/data/umweltzonen.json\");\n  setUWZ(uwz);\n};\n\nexport const getGazData = async (setGazData) => {\n  const prefix = \"GazData\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n  sources.no2 = await md5FetchText(prefix, host + \"/data/no2.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"no2\",\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\n\nconst hasValues = (item) => {\n  const values = item?.werte;\n  return values !== undefined && JSON.stringify(values) !== \"{}\";\n};\n\nconst getLastMeasurement = (item) => {\n  const lym = getLastYearMeasurements(item);\n\n  if (lym) {\n    const { values: lymValues, year } = lym;\n    if (lymValues.length === 13) {\n      return { value: lymValues[11], monthIndex: 11, year };\n    } else {\n      return { value: lymValues[lymValues.length - 1], monthIndex: lymValues.length - 1, year };\n    }\n  }\n};\nconst getLastYear = (item) => {\n  if (hasValues(item)) {\n    const values = item?.werte;\n    const sortedkeys = Object.keys(values).sort();\n    return sortedkeys[sortedkeys.length - 1];\n  }\n};\nconst getLastYearM1 = (item) => {\n  if (hasValues(item)) {\n    const values = item?.werte;\n    const sortedkeys = Object.keys(values).sort();\n    if (sortedkeys.length > 1) {\n      return sortedkeys[sortedkeys.length - 2];\n    }\n  }\n};\n\nconst getLastYearMeasurements = (item) => {\n  const ly = getLastYear(item);\n  const values = item?.werte;\n  if (ly) {\n    return { values: values[ly], year: ly };\n  }\n};\nconst getLastYearMinus1Measurements = (item) => {\n  const lym1 = getLastYearM1(item);\n  const values = item?.werte;\n  if (lym1) {\n    return values[lym1];\n  }\n};\n\nconst getWeightedAverage = (measurments) => {\n  if (measurments && measurments.length === 13) {\n    return measurments[12];\n  }\n};\nconst getActivityStatus = (item) => {\n  if (item?.bis !== undefined) {\n    return \"abgebaut\";\n  } else {\n    return \"aktiv\";\n  }\n  //todo inaktiv\n};\n\n// unauffällig 1-35 (einschließlich) µg/m³ Grün\n// auffällig 36-40 (einschließlich) µg/m³ Orange\n// warnend >40 µg/m³ Rot\nexport const getStatus = (item) => {\n  if (getActivityStatus(item) === \"aktiv\") {\n    const lym = getLastMeasurement(item)?.value;\n\n    if (lym > 0 && lym <= 35) {\n      return \"unauffaellig\";\n    } else if (lym > 35 && lym <= 40) {\n      return \"auffaellig\";\n    } else if (lym > 40) {\n      return \"warnend\";\n    } else if (lym === 9999) {\n      return \"inaktiv\";\n    } else {\n      return \"unknown\";\n    }\n  } else {\n    return getActivityStatus(item);\n  }\n};\n\nconst getSignature = (item) => {\n  const status = getStatus(item);\n  return LOOKUP[status].signature;\n};\n\nexport const LogSelection = () => {\n  const { selectedFeature } = useContext(FeatureCollectionContext);\n  console.log(\"selectedFeature.properties\", selectedFeature?.properties);\n\n  return <div></div>;\n};\n\nconst getAdditionalInfo = (item) => {\n  const lastYearAverage = getWeightedAverage(getLastYearMeasurements(item)?.values);\n  const lastYear = getLastYear(item);\n  const lastYearM1Average = getWeightedAverage(getLastYearMinus1Measurements(item));\n  const lastYearM1 = getLastYearM1(item);\n\n  let ret = \"\";\n  if (lastYearAverage || lastYearM1Average) {\n    ret = \"gewichtete Jahresmittelwerte:\";\n    if (lastYearAverage) {\n      ret = ret + \"\\n\" + lastYearAverage + \" µg/m³ (\" + lastYear + \")\";\n    }\n    if (lastYearM1Average) {\n      ret = ret + \"\\n\" + lastYearM1Average + \" µg/m³ (\" + lastYearM1 + \")\";\n    }\n  }\n\n  return ret;\n};\n\nconst getTitle = (item) => {\n  const lm = getLastMeasurement(item);\n\n  if (item?.bis) {\n    const demontage = new Date(item?.bis);\n\n    return `Diese Messstation ist seit ${\n      MONTHS[demontage.getMonth() - 1]\n    } ${demontage.getFullYear()} abmontiert.`;\n  } else {\n    if (lm) {\n      if (lm.value !== 9999) {\n        return lm.value + \" µg/m³ (\" + MONTHS[lm.monthIndex] + \" \" + lm.year + \")\";\n      } else {\n        return (\n          \"Für \" +\n          MONTHS[lm.monthIndex] +\n          \" \" +\n          lm.year +\n          \"liefert diese Messstation keinen Messwert\"\n        );\n      }\n    } else {\n      return \"Diese Messstation ist abmontiert\";\n    }\n  }\n};\n\nexport const convertItemToFeature = async (itemIn) => {\n  //   console.log(\"itemIn\", itemIn);\n\n  let item = await addSVGToProps(itemIn, (i) => \"luft/\" + getSignature(i));\n  item.status = getStatus(item);\n  const text =\n    item?.strasse +\n    \" \" +\n    (item?.hausnummer || \"\") +\n    (item?.zusatzinfo !== undefined ? \" (\" + item?.zusatzinfo + \")\" : \"\");\n\n  const type = \"Feature\";\n  const selected = false;\n  const geometry = item?.geojson;\n  item.color = LOOKUP[item.status].color;\n  const info = {\n    header: LOOKUP[item.status].header,\n    title: getTitle(item),\n    additionalInfo: getAdditionalInfo(item),\n    subtitle: (\n      <span>\n        {item?.strasse} {item?.hausnummer} {item?.zusatzinfo && <span>({item?.zusatzinfo})</span>}\n      </span>\n    ),\n  };\n  item.info = info;\n  item.foto = \"https://www.wuppertal.de/geoportal/luftmessstationen/fotos/NO2_test.jpg\";\n  return {\n    text,\n    type,\n    selected,\n    geometry,\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    },\n    properties: item,\n  };\n};\n\nexport const itemFilterFunction = ({ filterState }) => {\n  return (item) => {\n    return filterState?.stations?.includes(getStatus(item));\n  };\n};\n","import { useContext } from \"react\";\nimport {\n  FeatureCollectionContext,\n  FeatureCollectionDispatchContext,\n} from \"react-cismap/contexts/FeatureCollectionContextProvider\";\nimport { UIDispatchContext } from \"react-cismap/contexts/UIContextProvider\";\nimport { getSimpleHelpForTM } from \"react-cismap/tools/uiHelper\";\nimport { Link } from \"react-scroll\";\nimport ModalApplicationMenu from \"react-cismap/topicmaps/menu/ModalApplicationMenu\";\nimport Section from \"react-cismap/topicmaps/menu/Section\";\nimport FilterPanel from \"react-cismap/topicmaps/menu/FilterPanel\";\nimport DefaultSettingsPanel from \"react-cismap/topicmaps/menu/DefaultSettingsPanel\";\nimport ConfigurableDocBlocks from \"react-cismap/topicmaps/ConfigurableDocBlocks\";\nimport { LOOKUP } from \"./helper\";\nconst MyMenu = () => {\n  const { setAppMenuActiveMenuSection } = useContext(UIDispatchContext);\n  const { filterState, filterMode, filteredItems, shownFeatures } = useContext(\n    FeatureCollectionContext\n  );\n  const { setFilterState, setFilterMode } = useContext(FeatureCollectionDispatchContext);\n\n  const { items } = useContext(FeatureCollectionContext);\n\n  const kategorien = [];\n  const katValues = [];\n  const themen = [];\n  const themenValues = [];\n  const topicMapTitle = \"Luftmessstationskarte Wuppertal\";\n\n  const getFilterHeader = () => {\n    const count = filteredItems?.length || 0;\n\n    let term;\n    if (count === 1) {\n      term = \"Standort\";\n    } else {\n      term = \"Standorte\";\n    }\n\n    return `Messstationen der Luftqualität (${count} ${term} gefunden, davon ${\n      shownFeatures?.length || \"0\"\n    } in der Karte)`;\n  };\n\n  const filterConfiguration = {\n    mode: \"list\", // list or tabs\n    resetedFilter: {\n      stations: [\"unauffaellig\", \"auffaellig\", \"warnend\", \"inaktiv\", \"abgebaut\"],\n    },\n    filterMode: \"gibtnureinen\",\n    filters: [\n      {\n        title: \"aktive Messstationen\",\n        key: \"stations\",\n        type: \"checkBoxes\",\n        values: [\n          {\n            keys: [\"unauffaellig\", \"auffaellig\", \"warnend\", \"inaktiv\"],\n            title: \"alle aktiven Stationen\",\n          },\n          {\n            key: \"unauffaellig\",\n            indent: 30,\n            title: \"nur unaufffällige Stationen\",\n            color: LOOKUP.unauffaellig.color,\n            icon: \"square\",\n          },\n          {\n            key: \"auffaellig\",\n            indent: 30,\n            title: \"nur auffällige Stationen\",\n            color: LOOKUP.auffaellig.color,\n            icon: \"square\",\n          },\n          {\n            key: \"warnend\",\n            indent: 30,\n            title: \"nur warnende Stationen\",\n            color: LOOKUP.warnend.color,\n            icon: \"square\",\n          },\n          {\n            key: \"inaktiv\",\n            indent: 30,\n            title: \"nur Stationen mit Messausfall\",\n            color: LOOKUP.inaktiv.color,\n            icon: \"square\",\n          },\n        ],\n        setAll: () => {\n          setFilterState({ ...filterState, themen });\n        },\n        setNone: () => {\n          setFilterState({ ...filterState, themen: [] });\n        },\n        colorizer: (item, selected) => (selected ? item.color : \"#eeeeee\"),\n      },\n      {\n        title: \"inaktive Messstationen\",\n        key: \"stations\",\n        type: \"checkBoxes\",\n        values: [\n          {\n            key: \"abgebaut\",\n            title: \"inaktive Stationen\",\n            color: LOOKUP.inaktiv.color,\n            icon: \"square\",\n          },\n        ],\n        setAll: () => {\n          setFilterState({ ...filterState, kategorien });\n        },\n        setNone: () => {\n          setFilterState({ ...filterState, kategorien: [] });\n        },\n      },\n    ],\n  };\n  const simpleHelp = undefined;\n\n  return (\n    <ModalApplicationMenu\n      menuIcon={\"bars\"}\n      menuTitle={\"Filter, Einstellungen und Kompaktanleitung\"}\n      menuIntroduction={\n        <span>\n          Benutzen Sie die Auswahlmöglichkeiten unter{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='filter'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"filter\")}\n          >\n            Filter\n          </Link>\n          , um die in der Karte angezeigten vorbildlichen Luftmessstationen für Stickstoffdioxid\n          (NO₂) auf die für Sie relevanten Stationen zu beschränken. Über{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='settings'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"settings\")}\n          >\n            Einstellungen\n          </Link>{\" \"}\n          können Sie die Darstellung der Hintergrundkarte und der Stationen an Ihre Vorlieben\n          anpassen. Wählen Sie die{\" \"}\n          <Link\n            className='useAClassNameToRenderProperLink'\n            to='help'\n            containerId='myMenu'\n            smooth={true}\n            delay={100}\n            onClick={() => setAppMenuActiveMenuSection(\"help\")}\n          >\n            Kompaktanleitung\n          </Link>{\" \"}\n          für detailliertere Bedienungsinformationen.\n        </span>\n      }\n      menuSections={[\n        <Section\n          key='filter'\n          sectionKey='filter'\n          sectionTitle={getFilterHeader()}\n          sectionBsStyle='primary'\n          sectionContent={<FilterPanel filterConfiguration={filterConfiguration} />}\n        />,\n        <DefaultSettingsPanel key='settings' />,\n        <Section\n          key='help'\n          sectionKey='help'\n          sectionTitle='Kompaktanleitung'\n          sectionBsStyle='default'\n          sectionContent={\n            <ConfigurableDocBlocks configs={getSimpleHelpForTM(topicMapTitle, simpleHelp)} />\n          }\n        />,\n      ]}\n    />\n  );\n};\nexport default MyMenu;\n","import { FeatureCollectionDisplayWithTooltipLabels } from \"react-cismap\";\nimport { useEffect, useContext, useState } from \"react\";\nimport { getUWZ } from \"./helper\";\nimport { TopicMapContext } from \"react-cismap/contexts/TopicMapContextProvider\";\n\nconst UWZ = () => {\n  const [uwz, setUWZ] = useState([]);\n  const { location } = useContext(TopicMapContext);\n  useEffect(() => {\n    getUWZ(setUWZ);\n    document.title = \"Luftmessstationenskarte Wuppertal\";\n  }, []);\n\n  return (\n    <FeatureCollectionDisplayWithTooltipLabels\n      key={\"ds\"}\n      featureCollection={uwz}\n      style={(feature) => {\n        const style = {\n          color: \"#155317\",\n          weight: 3,\n          opacity: 0.5,\n          fillColor: \"#155317\",\n          fillOpacity: 0.15,\n        };\n        return style;\n      }}\n      labeler={(feature) => {\n        const currentZoom = location?.zoom || 8;\n        if (currentZoom > 7) {\n          return (\n            <h3\n              style={{\n                color: \"#155317\",\n                opacity: 0.7,\n                textShadow:\n                  \"1px 1px 0px  #000000,-1px 1px 0px  #000000, 1px -1px 0px  #000000, -1px -1px 0px  #000000, 2px 2px 15px #000000\",\n              }}\n            >\n              Umweltzone\n            </h3>\n          );\n        }\n      }}\n      featureClickHandler={() => {}}\n    />\n  );\n};\nexport default UWZ;\n","import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\n\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\nimport ContactButton from \"react-cismap/ContactButton\";\nimport {\n  getGazData,\n  convertItemToFeature,\n  LogSelection,\n  itemFilterFunction,\n  getStatus,\n  LOOKUP,\n} from \"./helper\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\nimport MyMenu from \"./Menu\";\nimport Icon from \"react-cismap/commons/Icon\";\n\nimport UWZ from \"./Umweltzonenlayer\";\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n\n  useEffect(() => {\n    getGazData(setGazData);\n    document.title = \"Luftmessstationenskarte Wuppertal\";\n  }, []);\n  return (\n    <TopicMapContextProvider\n      appKey='LuftmessstationenWuppertal.TopicMap'\n      featureItemsURL={\"https://wupp-topicmaps-data.cismet.de/data/no2.data.json\"}\n      getFeatureStyler={getGTMFeatureStyler}\n      featureTooltipFunction={(feature) => feature?.text}\n      convertItemToFeature={convertItemToFeature}\n      clusteringOptions={{\n        iconCreateFunction: getClusterIconCreatorFunction(30, (props) => props.color),\n      }}\n      additionalLayerConfiguration={{\n        uwz: {\n          title: \"Umweltzone\",\n          initialActive: true,\n          layer: <UWZ />,\n        },\n      }}\n      filterState={{\n        stations: [\"alle_aktiven\", \"unauffaellig\", \"auffaellig\", \"warnend\", \"inaktiv\", \"abgebaut\"],\n      }}\n      itemFilterFunction={itemFilterFunction}\n      classKeyFunction={(item) => LOOKUP[getStatus(item)].title}\n      getColorFromProperties={(item) => LOOKUP[getStatus(item)].color}\n    >\n      <TopicMapComponent\n        locatorControl={true}\n        gazData={gazData}\n        modalMenu={<MyMenu />}\n        gazetteerSearchPlaceholder='Stadtteil | Adresse | POI'\n        infoBox={\n          <GenericInfoBoxFromFeature\n            pixelwidth={350}\n            config={{\n              city: \"Wuppertal\",\n              navigator: {\n                noun: {\n                  singular: \"Messstation\",\n                  plural: \"Messstationen\",\n                },\n              },\n              noCurrentFeatureTitle: \"Keine Messtationen gefunden\",\n              noCurrentFeatureContent: \"\",\n            }}\n          />\n        }\n      >\n        <ContactButton\n          title='Rückfrage zu den Messwerten'\n          action={() => {\n            let link = document.createElement(\"a\");\n            link.setAttribute(\"type\", \"hidden\");\n            const br = \"\\n\";\n\n            let mailToHref =\n              \"mailto:luftreinhaltung@stadt.wuppertal.de?subject=Rückfrage zu Messwerten&body=\" +\n              encodeURI(`Sehr geehrte Damen und Herren,${br}${br} zu der Luftmessstationskarte `) +\n              encodeURI(`auf${br}${br}`) +\n              `${window.location.href.replace(/&/g, \"%26\").replace(/#/g, \"%23\")}` +\n              encodeURI(\n                `${br}` +\n                  `${br}` +\n                  `habe ich folgende Frage:${br}` +\n                  `${br}${br}${br}${br}` +\n                  `Mit freundlichen Grüßen${br}` +\n                  `${br}` +\n                  `${br}`\n              );\n            document.body.appendChild(link);\n            //link.href = downloadOptions.url;\n            link.href = mailToHref;\n            //link.download = downloadOptions.file;\n            //link.target = \"_blank\";\n            link.click();\n          }}\n        />\n        <FeatureCollection></FeatureCollection>\n        <LogSelection />\n      </TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}