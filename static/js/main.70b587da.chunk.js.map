{"version":3,"sources":["helper.js","App.js","reportWebVitals.js","index.js"],"names":["host","LOOKUP","abgebaut","color","signature","header","inaktiv","unauffaellig","auffaellig","warnend","unknown","MONTHS","getGazData","setGazData","a","prefix","sources","md5FetchText","adressen","bezirke","quartiere","pois","kitas","gazData","getGazDataForTopicIds","hasValues","item","values","werte","undefined","JSON","stringify","getLastMeasurement","lym","getLastYearMeasurements","lymValues","year","length","value","monthIndex","getLastYear","sortedkeys","Object","keys","sort","getLastYearM1","ly","getWeightedAverage","measurments","getActivityStatus","bis","getStatus","console","log","getSignature","status","LogSelection","selectedFeature","useContext","FeatureCollectionContext","properties","getAdditionalInfo","lastYearAverage","lastYear","lastYearM1Average","lym1","getLastYearMinus1Measurements","lastYearM1","ret","getTitle","lm","demontage","Date","getMonth","getFullYear","convertItemToFeature","itemIn","addSVGToProps","i","text","name","geometry","geojson","info","title","additionalInfo","subtitle","strasse","hausnummer","zusatzinfo","foto","type","selected","crs","App","useState","useEffect","document","TopicMapContextProvider","appKey","featureItemsURL","getFeatureStyler","getGTMFeatureStyler","featureTooltipFunction","feature","clusteringOptions","iconCreateFunction","getClusterIconCreatorFunction","props","TopicMapComponent","locatorControl","infoBox","GenericInfoBoxFromFeature","pixelwidth","config","city","navigator","noun","singular","plural","noCurrentFeatureTitle","noCurrentFeatureContent","ContactButton","action","link","createElement","setAttribute","br","mailToHref","encodeURI","window","location","href","replace","body","appendChild","click","FeatureCollection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.70b587da.chunk.js","sourcesContent":["import { addSVGToProps } from \"react-cismap/tools/svgHelper\";\nimport { md5FetchText, fetchJSON } from \"react-cismap/tools/fetching\";\nimport { getGazDataForTopicIds } from \"react-cismap/tools/gazetteerHelper\";\nimport { useContext } from \"react\";\nimport { FeatureCollectionContext } from \"react-cismap/contexts/FeatureCollectionContextProvider\";\n\nconst host = \"https://wupp-topicmaps-data.cismet.de\";\n\nexport const LOOKUP = {\n  abgebaut: {\n    color: \"#9DBCCC\",\n    signature: \"Luft_Icon_Messstation_abgebaut_farbig.svg\",\n    header: \"Messstation für NO² (inaktiv, demontiert)\",\n  },\n  inaktiv: {\n    color: \"#4AFAFC5\",\n    signature: \"Luft_Icon_Messstation_deaktiv_farbig.svg\",\n    header: \"Messstation für NO² (aktiv, aktuell Messausfall)\",\n  },\n  unauffaellig: {\n    color: \"#9ACD32\",\n    signature: \"Luft_Icon_Messstation_unauffaellig_farbig.svg\",\n    header: \"Messstation für NO² (aktiv, unauffällig)\",\n  },\n  auffaellig: {\n    color: \"#FFA500\",\n    signature: \"Luft_Icon_Messstation_auffaellig_farbig.svg\",\n    header: \"Messstation für NO² (aktiv, auffällig)\",\n  },\n  warnend: {\n    color: \"#E01414\",\n    signature: \"Luft_Icon_Messstation_warnend_farbig.svg\",\n    header: \"Messstation für NO² (aktiv, warnend)\",\n  },\n  unknown: { color: \"#eeeeee\", signature: \"Platz.svg\", header: \"Fehler\" },\n};\n\nconst MONTHS = [\n  \"Januar\",\n  \"Februar\",\n  \"März\",\n  \"April\",\n  \"Mai\",\n  \"Juni\",\n  \"Juli\",\n  \"August\",\n  \"September\",\n  \"Oktober\",\n  \"November\",\n  \"Dezember\",\n];\n\nexport const getGazData = async (setGazData) => {\n  const prefix = \"GazDataForStories\";\n  const sources = {};\n\n  sources.adressen = await md5FetchText(prefix, host + \"/data/adressen.json\");\n  sources.bezirke = await md5FetchText(prefix, host + \"/data/bezirke.json\");\n  sources.quartiere = await md5FetchText(prefix, host + \"/data/quartiere.json\");\n  sources.pois = await md5FetchText(prefix, host + \"/data/pois.json\");\n  sources.kitas = await md5FetchText(prefix, host + \"/data/kitas.json\");\n\n  const gazData = getGazDataForTopicIds(sources, [\n    \"pois\",\n    \"kitas\",\n    \"bezirke\",\n    \"quartiere\",\n    \"adressen\",\n  ]);\n\n  setGazData(gazData);\n};\n\nconst hasValues = (item) => {\n  const values = item?.werte;\n  return values !== undefined && JSON.stringify(values) !== \"{}\";\n};\n\nconst getLastMeasurement = (item) => {\n  const lym = getLastYearMeasurements(item);\n\n  if (lym) {\n    const { values: lymValues, year } = lym;\n    if (lymValues.length === 13) {\n      return { value: lymValues[11], monthIndex: 11, year };\n    } else {\n      return { value: lymValues[lymValues.length - 1], monthIndex: lymValues.length - 1, year };\n    }\n  }\n};\nconst getLastYear = (item) => {\n  if (hasValues(item)) {\n    const values = item?.werte;\n    const sortedkeys = Object.keys(values).sort();\n    return sortedkeys[sortedkeys.length - 1];\n  }\n};\nconst getLastYearM1 = (item) => {\n  if (hasValues(item)) {\n    const values = item?.werte;\n    const sortedkeys = Object.keys(values).sort();\n    if (sortedkeys.length > 1) {\n      return sortedkeys[sortedkeys.length - 2];\n    }\n  }\n};\n\nconst getLastYearMeasurements = (item) => {\n  const ly = getLastYear(item);\n  const values = item?.werte;\n  if (ly) {\n    return { values: values[ly], year: ly };\n  }\n};\nconst getLastYearMinus1Measurements = (item) => {\n  const lym1 = getLastYearM1(item);\n  const values = item?.werte;\n  if (lym1) {\n    return values[lym1];\n  }\n};\n\nconst getWeightedAverage = (measurments) => {\n  if (measurments && measurments.length === 13) {\n    return measurments[12];\n  }\n};\nconst getActivityStatus = (item) => {\n  if (item?.bis !== undefined) {\n    return \"abgebaut\";\n  } else {\n    return \"aktiv\";\n  }\n  //todo inaktiv\n};\n\n// unauffällig 1-35 (einschließlich) µg/m³ Grün\n// auffällig 36-40 (einschließlich) µg/m³ Orange\n// warnend >40 µg/m³ Rot\nconst getStatus = (item) => {\n  if (getActivityStatus(item) === \"aktiv\") {\n    const lym = getLastMeasurement(item)?.value;\n    console.log(\"lym\", lym);\n\n    if (lym > 0 && lym <= 35) {\n      return \"unauffaellig\";\n    } else if (lym > 35 && lym <= 40) {\n      return \"auffaellig\";\n    } else if (lym > 40) {\n      return \"warnend\";\n    } else if (lym === 9999) {\n      return \"inaktiv\";\n    } else {\n      return \"unknown\";\n    }\n  } else {\n    return getActivityStatus(item);\n  }\n};\n\nconst getSignature = (item) => {\n  const status = getStatus(item);\n  return LOOKUP[status].signature;\n};\n\nexport const LogSelection = () => {\n  const { selectedFeature } = useContext(FeatureCollectionContext);\n  console.log(\"selectedFeature.properties\", selectedFeature?.properties);\n\n  return <div></div>;\n};\n\nconst getAdditionalInfo = (item) => {\n  const lastYearAverage = getWeightedAverage(getLastYearMeasurements(item)?.values);\n  const lastYear = getLastYear(item);\n  const lastYearM1Average = getWeightedAverage(getLastYearMinus1Measurements(item));\n  const lastYearM1 = getLastYearM1(item);\n\n  let ret = \"\";\n  if (lastYearAverage || lastYearM1Average) {\n    ret = \"gewichtete Jahresmittelwerte:\";\n    if (lastYearAverage) {\n      ret = ret + \"\\n\" + lastYearAverage + \" µg/m³ (\" + lastYear + \")\";\n    }\n    if (lastYearM1Average) {\n      ret = ret + \"\\n\" + lastYearM1Average + \" µg/m³ (\" + lastYearM1 + \")\";\n    }\n  }\n  console.log(\"ret\", ret);\n\n  return ret;\n};\n\nconst getTitle = (item) => {\n  const lm = getLastMeasurement(item);\n\n  if (item?.bis) {\n    const demontage = new Date(item?.bis);\n    console.log(\"demontiert\", demontage.getMonth(), demontage.getFullYear());\n\n    return `Diese Messstation ist seit ${\n      MONTHS[demontage.getMonth() - 1]\n    } ${demontage.getFullYear()} abmontiert.`;\n  } else {\n    if (lm) {\n      if (lm.value !== 9999) {\n        return lm.value + \" µg/m³ (\" + MONTHS[lm.monthIndex] + \" \" + lm.year + \")\";\n      } else {\n        return (\n          \"Für \" +\n          MONTHS[lm.monthIndex] +\n          \" \" +\n          lm.year +\n          \"liefert diese Messstation keinen Messwert\"\n        );\n      }\n    } else {\n      return \"Diese Messstation ist abmontiert\";\n    }\n  }\n};\n\nexport const convertItemToFeature = async (itemIn) => {\n  //   console.log(\"itemIn\", itemIn);\n\n  let item = await addSVGToProps(itemIn, (i) => \"luft/\" + getSignature(i));\n  item.status = getStatus(item);\n  const text = item?.name || \"Kein Namexx\";\n  const type = \"Feature\";\n  const selected = false;\n  const geometry = item?.geojson;\n  item.color = LOOKUP[item.status].color;\n  const info = {\n    header: LOOKUP[item.status].header,\n    title: getTitle(item),\n    additionalInfo: getAdditionalInfo(item),\n    subtitle: (\n      <span>\n        {item?.strasse} {item?.hausnummer} {item?.zusatzinfo && <span>({item?.zusatzinfo})</span>}\n      </span>\n    ),\n  };\n  item.info = info;\n  item.foto = \"https://www.wuppertal.de/geoportal/luftmessstationen/fotos/NO2_test.jpg\";\n  return {\n    text,\n    type,\n    selected,\n    geometry,\n    crs: {\n      type: \"name\",\n      properties: {\n        name: \"urn:ogc:def:crs:EPSG::25832\",\n      },\n    },\n    properties: item,\n  };\n};\n","import { useEffect } from \"react\";\n\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"react-bootstrap-typeahead/css/Typeahead.css\";\nimport \"react-cismap/topicMaps.css\";\nimport TopicMapContextProvider from \"react-cismap/contexts/TopicMapContextProvider\";\nimport TopicMapComponent from \"react-cismap/topicmaps/TopicMapComponent\";\nimport FeatureCollection from \"react-cismap/FeatureCollection\";\nimport GenericInfoBoxFromFeature from \"react-cismap/topicmaps/GenericInfoBoxFromFeature\";\n\nimport getGTMFeatureStyler from \"react-cismap/topicmaps/generic/GTMStyler\";\nimport ContactButton from \"react-cismap/ContactButton\";\nimport { getGazData, convertItemToFeature, LogSelection } from \"./helper\";\nimport { getClusterIconCreatorFunction } from \"react-cismap/tools/uiHelper\";\n\nfunction App() {\n  const [gazData, setGazData] = useState([]);\n  useEffect(() => {\n    getGazData(setGazData);\n    document.title = \"Luftmessstationenskarte Wuppertal\";\n  }, []);\n  return (\n    <TopicMapContextProvider\n      appKey='LuftmessstationenWuppertal.TopicMap'\n      featureItemsURL={\"https://wupp-topicmaps-data.cismet.de/data/no2.data.json\"}\n      getFeatureStyler={getGTMFeatureStyler}\n      featureTooltipFunction={(feature) => feature?.text}\n      convertItemToFeature={convertItemToFeature}\n      clusteringOptions={{\n        iconCreateFunction: getClusterIconCreatorFunction(30, (props) => props.color),\n      }}\n    >\n      <TopicMapComponent\n        locatorControl={true}\n        gazData={gazData}\n        infoBox={\n          <GenericInfoBoxFromFeature\n            pixelwidth={350}\n            config={{\n              city: \"Wuppertal\",\n              navigator: {\n                noun: {\n                  singular: \"Messstation\",\n                  plural: \"Messstationen\",\n                },\n              },\n              noCurrentFeatureTitle: \"Keine Messtationen gefunden\",\n              noCurrentFeatureContent: \"\",\n            }}\n          />\n        }\n      >\n        <ContactButton\n          title='Rückfrage zu den Messwerten'\n          action={() => {\n            let link = document.createElement(\"a\");\n            link.setAttribute(\"type\", \"hidden\");\n            const br = \"\\n\";\n\n            let mailToHref =\n              \"mailto:luftreinhaltung@stadt.wuppertal.de?subject=Rückfrage zu Messwerten&body=\" +\n              encodeURI(`Sehr geehrte Damen und Herren,${br}${br} zu der Luftmessstationskarte `) +\n              encodeURI(`auf${br}${br}`) +\n              `${window.location.href.replace(/&/g, \"%26\").replace(/#/g, \"%23\")}` +\n              encodeURI(\n                `${br}` +\n                  `${br}` +\n                  `habe ich folgende Frage:${br}` +\n                  `${br}${br}${br}${br}` +\n                  `Mit freundlichen Grüßen${br}` +\n                  `${br}` +\n                  `${br}`\n              );\n            document.body.appendChild(link);\n            //link.href = downloadOptions.url;\n            link.href = mailToHref;\n            //link.download = downloadOptions.file;\n            //link.target = \"_blank\";\n            link.click();\n          }}\n        />\n        <FeatureCollection></FeatureCollection>\n        <LogSelection />\n      </TopicMapComponent>\n    </TopicMapContextProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}